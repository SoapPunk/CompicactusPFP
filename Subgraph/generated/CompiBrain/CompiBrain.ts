// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FlagSet extends ethereum.Event {
  get params(): FlagSet__Params {
    return new FlagSet__Params(this);
  }
}

export class FlagSet__Params {
  _event: FlagSet;

  constructor(event: FlagSet) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get flags(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class InitialSceneSet extends ethereum.Event {
  get params(): InitialSceneSet__Params {
    return new InitialSceneSet__Params(this);
  }
}

export class InitialSceneSet__Params {
  _event: InitialSceneSet;

  constructor(event: InitialSceneSet) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get scene(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class NameSet extends ethereum.Event {
  get params(): NameSet__Params {
    return new NameSet__Params(this);
  }
}

export class NameSet__Params {
  _event: NameSet;

  constructor(event: NameSet) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OperatorSet extends ethereum.Event {
  get params(): OperatorSet__Params {
    return new OperatorSet__Params(this);
  }
}

export class OperatorSet__Params {
  _event: OperatorSet;

  constructor(event: OperatorSet) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PFPSet extends ethereum.Event {
  get params(): PFPSet__Params {
    return new PFPSet__Params(this);
  }
}

export class PFPSet__Params {
  _event: PFPSet;

  constructor(event: PFPSet) {
    this._event = event;
  }

  get _compicactus(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class QuestionAdded extends ethereum.Event {
  get params(): QuestionAdded__Params {
    return new QuestionAdded__Params(this);
  }
}

export class QuestionAdded__Params {
  _event: QuestionAdded;

  constructor(event: QuestionAdded) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get scene(): string {
    return this._event.parameters[2].value.toString();
  }

  get question(): string {
    return this._event.parameters[3].value.toString();
  }

  get answer(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class QuestionRemoved extends ethereum.Event {
  get params(): QuestionRemoved__Params {
    return new QuestionRemoved__Params(this);
  }
}

export class QuestionRemoved__Params {
  _event: QuestionRemoved;

  constructor(event: QuestionRemoved) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get scene(): string {
    return this._event.parameters[2].value.toString();
  }

  get question(): string {
    return this._event.parameters[3].value.toString();
  }

  get questionId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class QuestionsSwitched extends ethereum.Event {
  get params(): QuestionsSwitched__Params {
    return new QuestionsSwitched__Params(this);
  }
}

export class QuestionsSwitched__Params {
  _event: QuestionsSwitched;

  constructor(event: QuestionsSwitched) {
    this._event = event;
  }

  get _contract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get scene(): string {
    return this._event.parameters[2].value.toString();
  }

  get questionId1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get questionId2(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class CompiBrain extends ethereum.SmartContract {
  static bind(address: Address): CompiBrain {
    return new CompiBrain("CompiBrain", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ERC712_VERSION(): string {
    let result = super.call("ERC712_VERSION", "ERC712_VERSION():(string)", []);

    return result[0].toString();
  }

  try_ERC712_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "ERC712_VERSION",
      "ERC712_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getAnswer(
    _contract: Address,
    id: BigInt,
    scene: string,
    question: string
  ): string {
    let result = super.call(
      "getAnswer",
      "getAnswer(address,uint256,string,string):(string)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromString(scene),
        ethereum.Value.fromString(question)
      ]
    );

    return result[0].toString();
  }

  try_getAnswer(
    _contract: Address,
    id: BigInt,
    scene: string,
    question: string
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getAnswer",
      "getAnswer(address,uint256,string,string):(string)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromString(scene),
        ethereum.Value.fromString(question)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDomainSeperator(): Bytes {
    let result = super.call(
      "getDomainSeperator",
      "getDomainSeperator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getDomainSeperator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeperator",
      "getDomainSeperator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getFlag(_contract: Address, id: BigInt): string {
    let result = super.call("getFlag", "getFlag(address,uint256):(string)", [
      ethereum.Value.fromAddress(_contract),
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_getFlag(_contract: Address, id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getFlag", "getFlag(address,uint256):(string)", [
      ethereum.Value.fromAddress(_contract),
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getInitialScene(_contract: Address, id: BigInt): string {
    let result = super.call(
      "getInitialScene",
      "getInitialScene(address,uint256):(string)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toString();
  }

  try_getInitialScene(
    _contract: Address,
    id: BigInt
  ): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getInitialScene",
      "getInitialScene(address,uint256):(string)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getName(_contract: Address, id: BigInt): string {
    let result = super.call("getName", "getName(address,uint256):(string)", [
      ethereum.Value.fromAddress(_contract),
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_getName(_contract: Address, id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getName", "getName(address,uint256):(string)", [
      ethereum.Value.fromAddress(_contract),
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getNonce(user: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOperator(_contract: Address, id: BigInt): Address {
    let result = super.call(
      "getOperator",
      "getOperator(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toAddress();
  }

  try_getOperator(
    _contract: Address,
    id: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOperator",
      "getOperator(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getQuestions(
    _contract: Address,
    id: BigInt,
    scene: string,
    offset: BigInt
  ): Array<string> {
    let result = super.call(
      "getQuestions",
      "getQuestions(address,uint256,string,uint256):(string[])",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromString(scene),
        ethereum.Value.fromUnsignedBigInt(offset)
      ]
    );

    return result[0].toStringArray();
  }

  try_getQuestions(
    _contract: Address,
    id: BigInt,
    scene: string,
    offset: BigInt
  ): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getQuestions",
      "getQuestions(address,uint256,string,uint256):(string[])",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromString(scene),
        ethereum.Value.fromUnsignedBigInt(offset)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getQuestionsCount(_contract: Address, id: BigInt, scene: string): BigInt {
    let result = super.call(
      "getQuestionsCount",
      "getQuestionsCount(address,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromString(scene)
      ]
    );

    return result[0].toBigInt();
  }

  try_getQuestionsCount(
    _contract: Address,
    id: BigInt,
    scene: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getQuestionsCount",
      "getQuestionsCount(address,uint256,string):(uint256)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromString(scene)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getScenes(_contract: Address, id: BigInt, offset: BigInt): Array<string> {
    let result = super.call(
      "getScenes",
      "getScenes(address,uint256,uint256):(string[])",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(offset)
      ]
    );

    return result[0].toStringArray();
  }

  try_getScenes(
    _contract: Address,
    id: BigInt,
    offset: BigInt
  ): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getScenes",
      "getScenes(address,uint256,uint256):(string[])",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(offset)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getScenesCount(_contract: Address, id: BigInt): BigInt {
    let result = super.call(
      "getScenesCount",
      "getScenesCount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_getScenesCount(
    _contract: Address,
    id: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getScenesCount",
      "getScenesCount(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_contract),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddQuestionCall extends ethereum.Call {
  get inputs(): AddQuestionCall__Inputs {
    return new AddQuestionCall__Inputs(this);
  }

  get outputs(): AddQuestionCall__Outputs {
    return new AddQuestionCall__Outputs(this);
  }
}

export class AddQuestionCall__Inputs {
  _call: AddQuestionCall;

  constructor(call: AddQuestionCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get scene(): string {
    return this._call.inputValues[2].value.toString();
  }

  get question(): string {
    return this._call.inputValues[3].value.toString();
  }

  get answer(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class AddQuestionCall__Outputs {
  _call: AddQuestionCall;

  constructor(call: AddQuestionCall) {
    this._call = call;
  }
}

export class AddQuestionBatchCall extends ethereum.Call {
  get inputs(): AddQuestionBatchCall__Inputs {
    return new AddQuestionBatchCall__Inputs(this);
  }

  get outputs(): AddQuestionBatchCall__Outputs {
    return new AddQuestionBatchCall__Outputs(this);
  }
}

export class AddQuestionBatchCall__Inputs {
  _call: AddQuestionBatchCall;

  constructor(call: AddQuestionBatchCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get scene(): string {
    return this._call.inputValues[2].value.toString();
  }

  get questions(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get answers(): Array<string> {
    return this._call.inputValues[4].value.toStringArray();
  }
}

export class AddQuestionBatchCall__Outputs {
  _call: AddQuestionBatchCall;

  constructor(call: AddQuestionBatchCall) {
    this._call = call;
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sigR(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get sigS(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get sigV(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get domainSeparator(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RemoveQuestionCall extends ethereum.Call {
  get inputs(): RemoveQuestionCall__Inputs {
    return new RemoveQuestionCall__Inputs(this);
  }

  get outputs(): RemoveQuestionCall__Outputs {
    return new RemoveQuestionCall__Outputs(this);
  }
}

export class RemoveQuestionCall__Inputs {
  _call: RemoveQuestionCall;

  constructor(call: RemoveQuestionCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get scene(): string {
    return this._call.inputValues[2].value.toString();
  }

  get question(): string {
    return this._call.inputValues[3].value.toString();
  }

  get questionId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RemoveQuestionCall__Outputs {
  _call: RemoveQuestionCall;

  constructor(call: RemoveQuestionCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetFlagCall extends ethereum.Call {
  get inputs(): SetFlagCall__Inputs {
    return new SetFlagCall__Inputs(this);
  }

  get outputs(): SetFlagCall__Outputs {
    return new SetFlagCall__Outputs(this);
  }
}

export class SetFlagCall__Inputs {
  _call: SetFlagCall;

  constructor(call: SetFlagCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get flags(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SetFlagCall__Outputs {
  _call: SetFlagCall;

  constructor(call: SetFlagCall) {
    this._call = call;
  }
}

export class SetInitialSceneCall extends ethereum.Call {
  get inputs(): SetInitialSceneCall__Inputs {
    return new SetInitialSceneCall__Inputs(this);
  }

  get outputs(): SetInitialSceneCall__Outputs {
    return new SetInitialSceneCall__Outputs(this);
  }
}

export class SetInitialSceneCall__Inputs {
  _call: SetInitialSceneCall;

  constructor(call: SetInitialSceneCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get scene(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SetInitialSceneCall__Outputs {
  _call: SetInitialSceneCall;

  constructor(call: SetInitialSceneCall) {
    this._call = call;
  }
}

export class SetNameCall extends ethereum.Call {
  get inputs(): SetNameCall__Inputs {
    return new SetNameCall__Inputs(this);
  }

  get outputs(): SetNameCall__Outputs {
    return new SetNameCall__Outputs(this);
  }
}

export class SetNameCall__Inputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SetNameCall__Outputs {
  _call: SetNameCall;

  constructor(call: SetNameCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get operator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetPFPCall extends ethereum.Call {
  get inputs(): SetPFPCall__Inputs {
    return new SetPFPCall__Inputs(this);
  }

  get outputs(): SetPFPCall__Outputs {
    return new SetPFPCall__Outputs(this);
  }
}

export class SetPFPCall__Inputs {
  _call: SetPFPCall;

  constructor(call: SetPFPCall) {
    this._call = call;
  }

  get _compicactus(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPFPCall__Outputs {
  _call: SetPFPCall;

  constructor(call: SetPFPCall) {
    this._call = call;
  }
}

export class SwitchQuestionsCall extends ethereum.Call {
  get inputs(): SwitchQuestionsCall__Inputs {
    return new SwitchQuestionsCall__Inputs(this);
  }

  get outputs(): SwitchQuestionsCall__Outputs {
    return new SwitchQuestionsCall__Outputs(this);
  }
}

export class SwitchQuestionsCall__Inputs {
  _call: SwitchQuestionsCall;

  constructor(call: SwitchQuestionsCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get scene(): string {
    return this._call.inputValues[2].value.toString();
  }

  get questionId1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get questionId2(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SwitchQuestionsCall__Outputs {
  _call: SwitchQuestionsCall;

  constructor(call: SwitchQuestionsCall) {
    this._call = call;
  }
}
